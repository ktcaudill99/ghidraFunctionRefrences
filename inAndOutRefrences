from ghidra.program.model.symbol import SymbolUtilities
from ghidra.util.task import ConsoleTaskMonitor
from java.io import FileWriter
from ghidra.app.script import GhidraScript
import json
import os

class ExportFunctionReferencesToJson(GhidraScript):

    def run(self):

        # get the name of the current domainn file (ghidra project file)
        domain_file = currentProgram.getDomainFile()
        file_name = domain_file.getName().replace('.gpr', '') # remove the .gpr extension if true
        #define the path to the JSON file in the user's home directory
        refs_json_path = os.path.join(os.getenv('HOME'), file_name + '_function_references.json')
        incoming_refs_json_path = os.path.join(os.getenv('HOME'), file_name + '_incoming_function_references.json')
        outgoing_refs_json_path = os.path.join(os.getenv('HOME'), file_name + '_outgoing_function_references.json')
        #create a task monitor
        monitor = ghidra.util.task.ConsoleTaskMonitor()

        #export the function references to a JSON file
        try:
            # Step 2: Get all functions in the current program
            function_manager = currentProgram.getFunctionManager()
            functions = function_manager.getFunctions(True)  # True to iterate forward
            println("Step 2: Retrieved all functions from the program.") 

            # Dictionary to store function names and their references
            refs_data = {}
            incoming_refs_data = {}
            outgoing_refs_data = {}

            # Step 3: Process each function
            for function in functions:
                refs, incoming_refs, outgoing_refs = self.get_function_references(function)  # Use self to call the method
                if refs:
                    refs_data[function.getName()] = refs
                if incoming_refs:
                    incoming_refs_data[function.getName()] = incoming_refs
                if outgoing_refs:
                    outgoing_refs_data[function.getName()] = outgoing_refs

            println("Step 3: Processed all functions and gathered their references.")

            # Step 4: Write data to JSON file
            with open(refs_json_path, 'w') as json_file:
                json.dump(refs_data, json_file, indent=4)
                println("Step 4: Data successfully written to JSON file at " + refs_json_path)
            with open(incoming_refs_json_path, 'w') as json_file:
                json.dump(incoming_refs_data, json_file, indent=4)
                println("Step 4: Data successfully written to JSON file at " + incoming_refs_json_path)
            with open(outgoing_refs_json_path, 'w') as json_file:
                json.dump(outgoing_refs_data, json_file, indent=4)
                println("Step 4: Data successfully written to JSON file at " + outgoing_refs_json_path)

        except Exception as e:
            println("An error occurred: " + str(e))

    def get_function_references(self, function):
        # Get all references to this function
        references = currentProgram.getReferenceManager().getReferencesTo(function.getEntryPoint())
        ref_list = self.process_references(references)

        #get all incoming function calls
        incoming_calls = function.getCalledFunctions(monitor)
        incoming_list = [call.getName() for call in incoming_calls]

        #get all outgoing function calls
        outgoing_calls = function.getCallingFunctions(monitor)
        outgoing_list = [call.getName() for call in outgoing_calls]

        return ref_list, incoming_list, outgoing_list

    def process_references(self, references):
        ref_list = []
        symbol_table = currentProgram.getSymbolTable() # Get the symbol table
        function_manager = currentProgram.getFunctionManager() # Get the function manager

        for ref in references:
            ref_address = ref.getFromAddress()
            symbol = symbol_table.getPrimarySymbol(ref_address)
            ref_func = function_manager.getFunctionContaining(ref_address)

            # Build the reference information string
            if symbol and ref_func:
                ref_info = "{} ({}) in function '{}'".format(ref_address, symbol.getName(), ref_func.getName())
            elif symbol:
                ref_info = "{} ({})".format(ref_address, symbol.getName())
            elif ref_func:
                ref_info = "{} in function '{}'".format(ref_address, ref_func.getName())
            else:
                ref_info = str(ref_address)

            ref_list.append(ref_info)
        
        return ref_list

# Instantiate and run the script
script = ExportFunctionReferencesToJson()
script.run()